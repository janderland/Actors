-- Wish Banana

-- WebSocket listens for new connections, announcing them
-- via the `Conn` message. Other actors can respond with an
-- `Accept` message to open the new connection. `Close`
-- messages are used to signal that a client closed the
-- connection or that another actor wants to close the
-- connection.

! (@Addr)Conn
  (@Addr)Accept
  (@Addr @String)Data
  (@Addr)Close
  (@Msg @Origin #Level)Log
  {}
!WebSocket


-- Translator converts `Data` messages into one of the
-- WishBanana messages, and vice-versa.

* (@Addr @String)Data
  (@Addr #Count)WinCount
  (@Addr)GetName
  (@Addr @Name)PutName
  (@Addr @Name)OpponentName
  (@Addr #Count)CountDown
  (@Addr)Click
  (#You #Them)Scores
  |()Won ()Lost|GameOver
  (@Msg @Origin #Level)Log
  {}
*Translator


-- Queue accepts connection as they arrive. Every two
-- connections are paired up into a game.

! (@Addr)Conn
  (@Addr)Accept
  (@Addr)Close
  (@Addr1 @Addr2)Game
  (@Msg @Origin #Level)Log
  {}
!Queue


-- Referee facilitates a game between two connections.

* (@Addr1 @Addr2)Game
  (@Addr)Close
  (@Addr #Count)WinCount
  (@Addr)GetName
  (@Addr @Name)PutName
  (@Addr @Name)OpponentName
  (@Addr #Count)CountDown
  (@Addr)Click
  (#You #Them)Scores
  |()Won ()Lost|GameOver
  (@Msg @Origin #Level)Log
  {}
*Referee


! (#Millis {}Action @Origin)Timeout
  {}
!Timer


-- The Logger collects Logs from the other actors then
-- prints them to screen and/or writes them to a file.

! (@Msg #Level @Origin)Log
  {}
!Logger
